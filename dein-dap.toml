[[plugins]]
repo = 'mfussenegger/nvim-dap'
hook_add ='''
" https://zenn.dev/lunarxlark/articles/763b3c26ed7ec0
" https://qiita.com/aratana_tamutomo/items/7397b037e912d84d33b7
lua << EOF
  local dap = require("dap")
  dap.listeners.before['event_initialized']['custom'] = function(session, body)
    require'dapui'.open()
  end
  dap.listeners.before['event_terminated']['custom'] = function(session, body)
    require'dapui'.close()
  end
  dap.adapters.go = function(callback, config)
      local stdout = vim.loop.new_pipe(false)
      local handle
      local pid_or_err
      local port = 38697
      local opts = {
        stdio = {nil, stdout},
        args = {"dap", "-l", "127.0.0.1:" .. port},
        detached = true
      }
      handle, pid_or_err = vim.loop.spawn("dlv", opts, function(code)
        stdout:close()
        handle:close()
        if code ~= 0 then
          print('dlv exited with code', code)
        end
      end)
      assert(handle, 'Error running dlv: ' .. tostring(pid_or_err))
      stdout:read_start(function(err, chunk)
        assert(not err, err)
        if chunk then
          vim.schedule(function()
            require('dap.repl').append(chunk)
          end)
        end
      end)
      -- Wait for delve to start
      vim.defer_fn(
        function()
          callback({type = "server", host = "127.0.0.1", port = port})
        end,
        100)
  end
  dap.configurations.go = {
    {
        type = "go",
        name = "Debug",
        request = "launch",
        program = "${file}"
    },
    {
        type = "go",
        name = "Debug test", -- configuration for debugging test files
        request = "launch",
        mode = "test",
        program = "${file}"
    },
    -- works with go.mod packages and sub packages
    {
        type = "go",
        name = "Debug test (go.mod)",
        request = "launch",
        mode = "test",
        program = "./${relativeFileDirname}"
    }
  }
EOF
nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>
nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <leader>B :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
nnoremap <silent> <leader>dl :lua require'dap'.run_last()<CR>
nnoremap <silent> <leader>dq :lua require'dap'.terminate()<CR>
'''

[[plugins]]
repo = 'rcarriga/nvim-dap-ui'
depends = 'nvim-dap'
hook_add ='''
lua << EOF
  require'dapui'.setup()
EOF
'''

[[plugins]]
repo = 'theHamsta/nvim-dap-virtual-text'
depends = 'nvim-dap'
hook_add ='''
lua << EOF
  require'nvim-dap-virtual-text'.setup()
EOF
'''

[[plugins]]
repo = 'leoluz/nvim-dap-go'
depends = 'nvim-dap'
hook_add ='''
lua << EOF
  require'dap-go'.setup()
EOF
'''
